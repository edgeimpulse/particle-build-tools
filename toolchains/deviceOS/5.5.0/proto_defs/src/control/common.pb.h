/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_PARTICLE_CTRL_CONTROL_COMMON_PB_H_INCLUDED
#define PB_PARTICLE_CTRL_CONTROL_COMMON_PB_H_INCLUDED
#include <pb.h>
#include "control/extensions.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* The field numbers here are just protobuf details.  The value to pay attention to 
 is the "int_value" option, which corresponds to the numeric value that will 
 be set in reply frames (which itself ultimately comes from the numeric values
 in the system_error_t enum in the firmware code). */
typedef enum _particle_ctrl_ResultCode { 
    particle_ctrl_ResultCode_OK = 0, 
    particle_ctrl_ResultCode_NOT_ALLOWED = 1, 
    particle_ctrl_ResultCode_TIMEOUT = 2, 
    particle_ctrl_ResultCode_NOT_FOUND = 3, 
    particle_ctrl_ResultCode_ALREADY_EXIST = 4, 
    particle_ctrl_ResultCode_INVALID_STATE = 5, 
    particle_ctrl_ResultCode_NO_MEMORY = 6, 
    particle_ctrl_ResultCode_INVALID_PARAM = 7 
} particle_ctrl_ResultCode;

/* The field numbers here are just protobuf details.  The value to pay attention to 
 is the "int_value" option, which corresponds to the numeric value that will 
 be set in reply frames (which itself ultimately comes from the numeric values
 in the system_error_t enum in the firmware code). */
typedef enum _particle_ctrl_IPAddress_Protocol { 
    particle_ctrl_IPAddress_Protocol_NONE = 0, 
    particle_ctrl_IPAddress_Protocol_IPv4 = 1, 
    particle_ctrl_IPAddress_Protocol_IPv6 = 2 
} particle_ctrl_IPAddress_Protocol;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(16) particle_ctrl_IPAddress_address_t;
/* Deprecated, IpAddress should be used instead */
typedef struct _particle_ctrl_IPAddress { 
    particle_ctrl_IPAddress_Protocol protocol; 
    particle_ctrl_IPAddress_address_t address; 
} particle_ctrl_IPAddress;

typedef struct _particle_ctrl_Ipv4Address { 
    uint32_t address; 
} particle_ctrl_Ipv4Address;

typedef struct _particle_ctrl_Ipv6Address { 
    pb_byte_t address[16]; 
} particle_ctrl_Ipv6Address;

typedef struct _particle_ctrl_IpAddress { 
    pb_size_t which_address;
    union {
        particle_ctrl_Ipv4Address v4;
        particle_ctrl_Ipv6Address v6;
    } address; /* IP v4 address */
} particle_ctrl_IpAddress;


/* Helper constants for enums */
#define _particle_ctrl_ResultCode_MIN particle_ctrl_ResultCode_OK
#define _particle_ctrl_ResultCode_MAX particle_ctrl_ResultCode_INVALID_PARAM
#define _particle_ctrl_ResultCode_ARRAYSIZE ((particle_ctrl_ResultCode)(particle_ctrl_ResultCode_INVALID_PARAM+1))

#define _particle_ctrl_IPAddress_Protocol_MIN particle_ctrl_IPAddress_Protocol_NONE
#define _particle_ctrl_IPAddress_Protocol_MAX particle_ctrl_IPAddress_Protocol_IPv6
#define _particle_ctrl_IPAddress_Protocol_ARRAYSIZE ((particle_ctrl_IPAddress_Protocol)(particle_ctrl_IPAddress_Protocol_IPv6+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define particle_ctrl_Ipv4Address_init_default   {0}
#define particle_ctrl_Ipv6Address_init_default   {{0}}
#define particle_ctrl_IpAddress_init_default     {0, {particle_ctrl_Ipv4Address_init_default}}
#define particle_ctrl_IPAddress_init_default     {_particle_ctrl_IPAddress_Protocol_MIN, {0, {0}}}
#define particle_ctrl_Ipv4Address_init_zero      {0}
#define particle_ctrl_Ipv6Address_init_zero      {{0}}
#define particle_ctrl_IpAddress_init_zero        {0, {particle_ctrl_Ipv4Address_init_zero}}
#define particle_ctrl_IPAddress_init_zero        {_particle_ctrl_IPAddress_Protocol_MIN, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define particle_ctrl_IPAddress_protocol_tag     1
#define particle_ctrl_IPAddress_address_tag      2
#define particle_ctrl_Ipv4Address_address_tag    1
#define particle_ctrl_Ipv6Address_address_tag    1
#define particle_ctrl_IpAddress_v4_tag           1
#define particle_ctrl_IpAddress_v6_tag           2

/* Struct field encoding specification for nanopb */
#define particle_ctrl_Ipv4Address_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED32,  address,           1)
#define particle_ctrl_Ipv4Address_CALLBACK NULL
#define particle_ctrl_Ipv4Address_DEFAULT NULL

#define particle_ctrl_Ipv6Address_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, address,           1)
#define particle_ctrl_Ipv6Address_CALLBACK NULL
#define particle_ctrl_Ipv6Address_DEFAULT NULL

#define particle_ctrl_IpAddress_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (address,v4,address.v4),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (address,v6,address.v6),   2)
#define particle_ctrl_IpAddress_CALLBACK NULL
#define particle_ctrl_IpAddress_DEFAULT NULL
#define particle_ctrl_IpAddress_address_v4_MSGTYPE particle_ctrl_Ipv4Address
#define particle_ctrl_IpAddress_address_v6_MSGTYPE particle_ctrl_Ipv6Address

#define particle_ctrl_IPAddress_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    protocol,          1) \
X(a, STATIC,   SINGULAR, BYTES,    address,           2)
#define particle_ctrl_IPAddress_CALLBACK NULL
#define particle_ctrl_IPAddress_DEFAULT NULL

extern const pb_msgdesc_t particle_ctrl_Ipv4Address_msg;
extern const pb_msgdesc_t particle_ctrl_Ipv6Address_msg;
extern const pb_msgdesc_t particle_ctrl_IpAddress_msg;
extern const pb_msgdesc_t particle_ctrl_IPAddress_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define particle_ctrl_Ipv4Address_fields &particle_ctrl_Ipv4Address_msg
#define particle_ctrl_Ipv6Address_fields &particle_ctrl_Ipv6Address_msg
#define particle_ctrl_IpAddress_fields &particle_ctrl_IpAddress_msg
#define particle_ctrl_IPAddress_fields &particle_ctrl_IPAddress_msg

/* Maximum encoded size of messages (where known) */
#define particle_ctrl_IPAddress_size             20
#define particle_ctrl_IpAddress_size             20
#define particle_ctrl_Ipv4Address_size           5
#define particle_ctrl_Ipv6Address_size           18

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
